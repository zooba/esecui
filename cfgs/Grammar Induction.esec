<?xml version="1.0" encoding="utf-8"?><configuration name="Grammar Induction"><system><definition>FROM random_tgp(instructions=instructions, terminals=0, deepest=10) \
    SELECT (size) population
YIELD population

BEGIN generation
    FROM population \
        SELECT (0.9*size) to_cross, (0.02*size) to_mutate, (size) to_reproduce \
        USING fitness_proportional
    
    FROM to_cross SELECT offspring1 USING crossover_one(deepest_result, terminal_prob=0.1)
    FROM to_mutate SELECT offspring2 USING mutate_random(deepest_result)
    
    FROM offspring1, offspring2, to_reproduce SELECT (size) population
    
    YIELD population
END generation</definition><support>from esec.species.tgp import Instruction, InstructionWithState

class DNASequenceIterator(object):
    def __init__(self, sequence):
        self.sequence = sequence
        self.currentIndex = -1
    
    def next(self):
        self.currentIndex += 1
        return self.current_char()
    
    def has_next(self):
        return self.currentIndex &lt; len(self.sequence) - 1
    
    def current_char(self):
        return self.sequence[self.currentIndex]

def hamming_distance(s1, s2):
    assert len(s1) == len(s2)
    return sum(ch1 != ch2 for ch1, ch2 in zip(s1, s2))

#define the DNA sequence and the best expected result (each character in the expected result is boolean; 1 = True, 0 = False)
sequence =           "CAAAGTTTCTGTCAACGTAAGCTAATTGCCAACTTATCCCATGAACTTTAACAACGGTAAACTTCCAGCATGCCAATGCTGTGTCATGCTAGCTAGTAATCGATCGGTCATCCTTAGCTTAGCTAACGCTGGGCACTTTAACTTAGGTACGCATCGACCGGTAAGTCCAATGCCGGGAAACGTTGTAGCTACTTCAAACTTTTTGAAGTCCAGATCGAACCCGATTGAGCGGGGTTGCGGTAAAATTCTGGTCTTTTTAAGCACAAGCTTGCCTTTTTAAAGCTTTAGTCCCTGAACTTGATCCGTAACGTAGTTCCGAAAAAAGCTAGGCGATCGCCCCTCGCGATTGCAATTTGTATTGCGCTATCCCGATTTCGCTAAAGTCCGAAGGTCTTTCGATTCGGAAACTCGGCTAGCTAGATAGATACCAATTTAGATCCGATTCGATCGCCTAGATCAGAAAAACCGATCGTTAAGCTTTGAAATCGGAGCTGCTCGCAAGTTTAATGCTGGCTTCAACTTACCCCTGAATCGTAGATTGCATTTTTCGAAGCGCGATAATATAAAATTGCTAGATCGCTAGCTATATCGATCGGCTGATCGTAACATGCAAGTTTAGTAGCTGCRTTAAAGCCTGTACCCGTTTGATCGAACTTTAGTACGTAGCGGGGTACGATGTAGCAGCTGTCAGCTAGCCTTGATCGATGCAAGTCAGTAGCCCTTAGTTTCGGAAACTTAGCTAGCGCTGTGCCGTGCTCTGATCGTACCCGTAAGCCTGTCAGTGCGAAATGCCTTAAAAAGTTATGTCCAGGGTCCAGGACAAGTACGTAAATAAGTCCAATGTTGCAATGCTGCAAATTTGAATTTGTCCCTGACCCCGTAGCTCGTCGATCGATCGATCGTAAGCATGCATGCGTAGATATCGATTAAAGTTGCTAGCCGGATGCTAGGGTCCAGTCCCTGAACGTCAGTCAATCCCGCTAAATGAAATTCAACTCGA"
bestResultSequence
maxScore = len(sequence)

def MHG(dnaIterator):
    if (dnaIterator.has_next()):
        dnaIterator.next() #increment the current sequence position
    
    return True

instructions = [
    InstructionWithState(lambda dnaIterator: dnaIterator.current_char() == "A", param_count=0, name='AIF'),
    InstructionWithState(lambda dnaIterator: dnaIterator.current_char() == "C", param_count=0, name='CIF'),
    InstructionWithState(lambda dnaIterator: dnaIterator.current_char() == "G", param_count=0, name='GIF'),
    InstructionWithState(lambda dnaIterator: dnaIterator.current_char() == "T", param_count=0, name='TIF'),
    InstructionWithState(lambda dnaIterator: MHG(dnaIterator), param_count=0, name='MHG'),
    Instruction(lambda a, b: a and b, 2, 'AND'),
    Instruction(lambda a, b: a or b, 2, 'OR'),
    Instruction(lambda a: not a, 1, 'NOT')
]

def all_fit(sender):
    from esec.context import context
    return ('\n'.join(str(fit) for fit in sorted(i.fitness for i in context['population'])),)

def percent_best(sender):
    from esec.context import context
    from itertools import count
    fits = sorted((i.fitness.simple for i in context['population']), reverse=True)
    
    return (sum(i == fits[0] for i in fits) * 100.0 / len(fits),)</support><parameters>size: 50
deepest_result: 10</parameters></system><landscape><class>Custom</class><parameters></parameters><evaluator>from esec.landscape.tgp import TGPFitness

dnaIterator = DNASequenceIterator(sequence)
resultSequence = ""
while (dnaIterator.has_next()):
    dnaIterator.next()
    startingIndex = dnaIterator.currentIndex
    result = indiv.evaluate(indiv, dnaIterator)
    
    if result:
        for i in range(startingIndex, dnaIterator.currentIndex + 1):
            resultSequence += "1"
    else:
        resultSequence += "0"
        dnaIterator.currentIndex = startingIndex

#compare characters in the result sequence to the best expected result sequence and calculate a score based on the difference
score = maxScore - hamming_distance(resultSequence, bestResultSequence)
#print str(score) + " " + resultSequence
    
return TGPFitness([score, len(indiv[0])])
</evaluator></landscape><monitor><limits fitness="1000" /></monitor></configuration>