using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;

namespace esecui
{
    public partial class Export : Form
    {
        Configuration Configuration;

        #region Initialisation and Display

        public static void Show(IWin32Window owner,
            Configuration config)
        {
            using (var export = new Export(config))
            {
                export.ShowDialog(owner);
            }
        }

        public Export(Configuration config)
            : this()
        {
            Configuration = config;
        }

        public Export()
        {
            Configuration = null;
            InitializeComponent();

            panelEdit.Dock = DockStyle.Fill;
            panelEdit.Visible = true;
            
            panelPreview.Dock = DockStyle.Fill;
            panelPreview.Visible = false;

            var settings = Properties.Settings.Default;
            
            // Initialise the UI font
            var uiFont = new Font("Segoe UI", settings.UIFontSize);
            if (uiFont.Name != uiFont.OriginalFontName)
            {
                uiFont = new Font("Tahoma", settings.UIFontSize);
            }
            if (uiFont.Name != uiFont.OriginalFontName)
            {
                uiFont = new Font(FontFamily.GenericSansSerif, settings.UIFontSize);
            }
            Font = uiFont;

            // Initialise the code font
            var codeFont = new Font("Consolas", settings.CodeFontSize);
            if (codeFont.Name != codeFont.OriginalFontName)
            {
                codeFont = new Font(FontFamily.GenericMonospace, settings.CodeFontSize);
            }
            txtPreview.Font = codeFont;
            
            txtPreview.SetHighlighting("Python");
            txtPreview.Document.ReadOnly = true;
        }

        #endregion

        #region Save/Close

        private void btnSave_Click(object sender, EventArgs e)
        {
            using (var sfd = new SaveFileDialog())
            {
                sfd.Filter = "Python File (*.py)|*.py|All Files (*.*)|*.*";
                sfd.AutoUpgradeEnabled = true;
                sfd.AddExtension = true;
                sfd.DefaultExt = ".py";
                sfd.CreatePrompt = false;
                sfd.RestoreDirectory = false;
                sfd.OverwritePrompt = true;
                if (sfd.ShowDialog(this) != DialogResult.OK) return;

                UpdatePreview();
                using (var dest = new System.IO.StreamWriter(sfd.OpenFile(), Encoding.ASCII))
                {
                    dest.Write(txtPreview.Text);
                }
            }
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        #endregion

        #region Template Parts

        const string TemplateHeader = @"#
# {0}
#
# Generated by {1} {2} at {3}
#

";

        const string TemplateImports = @"import esec

";

        const string TemplateDefinition = @"DEFINITION = r'''{0}'''

";

        const string TemplateCustomLandscape = @"@esec.esdl_eval
def {0}(indiv):
";

        const string TemplateConfiguration = @"config = {{
    'landscape': {{
        'class': {0},
{1}    }},
    'system': {{
        'definition': DEFINITION,
{2}    }},
    'monitor': {{
        'class': esec.monitors.{3}Monitor,
        'report': '',
        'summary': '',
        'limits': {{
            'iterations': {4},
            'evaluations': {5},
            'fitness': {6},
        }},
    }},
}}

";

        const string TemplateBatch = @"def batch():
    while True:
        yield {{ 'config': config }}
";

        #endregion

        #region Text Helpers

        private string IndentBlock(string source, string indent)
        {
            var sb = new StringBuilder();
            IndentBlock(source, indent, sb);
            return sb.ToString();
        }

        private void IndentBlock(string source, string indent, StringBuilder destination)
        {
            using (var reader = new StringReader(source))
            {
                for (var line = reader.ReadLine(); line != null; line = reader.ReadLine())
                {
                    destination.AppendLine(indent + line);
                }
            }
        }

        private IEnumerable<KeyValuePair<string,string>> ReadVariables(string source)
        {
            using (var reader = new StringReader(source))
            {
                for (var line = reader.ReadLine(); line != null; line = reader.ReadLine())
                {
                    string key, value;
                    int i1 = line.IndexOf(':');
                    int i2 = line.IndexOf('=');
                    if (i1 == -1) i1 = int.MaxValue;
                    if (i2 == -1) i2 = int.MaxValue;
                    if (i1 < i2)
                    {
                        key = line.Substring(0, i1).Trim();
                        value = line.Substring(i1 + 1).Trim();
                    }
                    else if (i2 < i1)
                    {
                        key = line.Substring(0, i2).Trim();
                        value = line.Substring(i2 + 1).Trim();
                    }
                    else
                    {
                        key = value = line.Trim();
                    }

                    if (key.Length > 0 && !"#/;".Contains(key[0]) && value.Length > 0)
                    {
                        yield return new KeyValuePair<string, string>(key, value);
                    }
                }
            }
        }

        #endregion

        #region Code Preview

        private void UpdatePreview()
        {
            var sb = new StringBuilder();
            sb.AppendFormat(TemplateHeader,
                Configuration.Name,
                Application.ProductName,
                Application.ProductVersion,
                DateTime.Now.ToString());

            sb.Append(TemplateImports);
            sb.AppendFormat(TemplateDefinition, Configuration.Definition);


            var landscapeName = Configuration.Landscape;
            if (landscapeName == "Custom")
            {
                landscapeName = "CustomLandscape";
                sb.AppendFormat(TemplateCustomLandscape, landscapeName);
                IndentBlock(Configuration.CustomEvaluator, "    ", sb);
            }

            string landscapeVariables;
            {
                var sb2 = new StringBuilder();

                foreach (var kv in ReadVariables(Configuration.LandscapeParameters))
                {
                    sb2.AppendFormat("        '{0}': {1},\n", kv.Key, kv.Value);
                }

                landscapeVariables = sb2.ToString();
            }

            string systemVariables;
            {
                var sb2 = new StringBuilder();

                foreach (var kv in ReadVariables(Configuration.SystemParameters))
                {
                    sb2.AppendFormat("        '{0}': {1},\n", kv.Key, kv.Value);
                }

                systemVariables = sb2.ToString();
            }

            

            var monitorName = "CSV";


            sb.AppendFormat(TemplateConfiguration,
                landscapeName,
                landscapeVariables,
                systemVariables,
                monitorName,
                Configuration.IterationLimit.HasValue ? Configuration.IterationLimit.Value.ToString() : "None",
                Configuration.EvaluationLimit.HasValue ? Configuration.EvaluationLimit.Value.ToString() : "None",
                Configuration.FitnessLimit.HasValue ? Configuration.FitnessLimit.Value.ToString() : "None"
                );

            sb.AppendFormat(TemplateBatch);

            txtPreview.Text = sb.ToString();
        }

        private void chkPreview_CheckedChanged(object sender, EventArgs e)
        {
            if (chkPreview.Checked) UpdatePreview();
            panelEdit.Visible = !(panelPreview.Visible = chkPreview.Checked);   // yes, "=" is deliberate
        }
        
        #endregion

        private void Export_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape) btnClose.PerformClick();
        }

    }
}
